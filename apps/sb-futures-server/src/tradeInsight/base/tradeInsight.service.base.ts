/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TradeInsight as PrismaTradeInsight } from "@prisma/client";

export class TradeInsightServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradeInsightCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradeInsight.count(args);
  }

  async tradeInsights(
    args: Prisma.TradeInsightFindManyArgs
  ): Promise<PrismaTradeInsight[]> {
    return this.prisma.tradeInsight.findMany(args);
  }
  async tradeInsight(
    args: Prisma.TradeInsightFindUniqueArgs
  ): Promise<PrismaTradeInsight | null> {
    return this.prisma.tradeInsight.findUnique(args);
  }
  async createTradeInsight(
    args: Prisma.TradeInsightCreateArgs
  ): Promise<PrismaTradeInsight> {
    return this.prisma.tradeInsight.create(args);
  }
  async updateTradeInsight(
    args: Prisma.TradeInsightUpdateArgs
  ): Promise<PrismaTradeInsight> {
    return this.prisma.tradeInsight.update(args);
  }
  async deleteTradeInsight(
    args: Prisma.TradeInsightDeleteArgs
  ): Promise<PrismaTradeInsight> {
    return this.prisma.tradeInsight.delete(args);
  }
}
