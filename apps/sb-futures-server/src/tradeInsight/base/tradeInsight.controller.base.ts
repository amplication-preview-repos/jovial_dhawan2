/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradeInsightService } from "../tradeInsight.service";
import { TradeInsightCreateInput } from "./TradeInsightCreateInput";
import { TradeInsight } from "./TradeInsight";
import { TradeInsightFindManyArgs } from "./TradeInsightFindManyArgs";
import { TradeInsightWhereUniqueInput } from "./TradeInsightWhereUniqueInput";
import { TradeInsightUpdateInput } from "./TradeInsightUpdateInput";

export class TradeInsightControllerBase {
  constructor(protected readonly service: TradeInsightService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradeInsight })
  async createTradeInsight(
    @common.Body() data: TradeInsightCreateInput
  ): Promise<TradeInsight> {
    return await this.service.createTradeInsight({
      data: data,
      select: {
        averagePrice: true,
        createdAt: true,
        gainLoss: true,
        id: true,
        totalVolume: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradeInsight] })
  @ApiNestedQuery(TradeInsightFindManyArgs)
  async tradeInsights(@common.Req() request: Request): Promise<TradeInsight[]> {
    const args = plainToClass(TradeInsightFindManyArgs, request.query);
    return this.service.tradeInsights({
      ...args,
      select: {
        averagePrice: true,
        createdAt: true,
        gainLoss: true,
        id: true,
        totalVolume: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradeInsight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradeInsight(
    @common.Param() params: TradeInsightWhereUniqueInput
  ): Promise<TradeInsight | null> {
    const result = await this.service.tradeInsight({
      where: params,
      select: {
        averagePrice: true,
        createdAt: true,
        gainLoss: true,
        id: true,
        totalVolume: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradeInsight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradeInsight(
    @common.Param() params: TradeInsightWhereUniqueInput,
    @common.Body() data: TradeInsightUpdateInput
  ): Promise<TradeInsight | null> {
    try {
      return await this.service.updateTradeInsight({
        where: params,
        data: data,
        select: {
          averagePrice: true,
          createdAt: true,
          gainLoss: true,
          id: true,
          totalVolume: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradeInsight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradeInsight(
    @common.Param() params: TradeInsightWhereUniqueInput
  ): Promise<TradeInsight | null> {
    try {
      return await this.service.deleteTradeInsight({
        where: params,
        select: {
          averagePrice: true,
          createdAt: true,
          gainLoss: true,
          id: true,
          totalVolume: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
